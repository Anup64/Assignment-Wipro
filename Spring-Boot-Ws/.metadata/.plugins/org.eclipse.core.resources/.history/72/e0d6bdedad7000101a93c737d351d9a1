package com.example.ecommerce_app.controller;

import com.example.ecommerce_app.model.Order;
import com.example.ecommerce_app.service.CustomerService;
import com.example.ecommerce_app.service.OrderService;
import com.example.ecommerce_app.service.ProductService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
public class OrderController {

    @Autowired
    private OrderService orderService;
    @Autowired
    private CustomerService customerService;
    @Autowired
    private ProductService productService;

    @GetMapping("/order-list")
    public String listOrders(Model model) {
        List<Order> orders = orderService.getAllOrders();
        model.addAttribute("orderList", orders);
        return "order-list"; // View page: orders.html
    }

//    @GetMapping("/add-order")
//    public String showAddOrderForm(Model model) {
//        Order order = new Order();
//        model.addAttribute("order", order);
//        return "add-order"; // View page: add-order.html
//    }
    @GetMapping("/add-order")
    public String showAddOrderForm(Model model) {
        model.addAttribute("order", new Order());
        model.addAttribute("customers", customerService.getAllCustomers());
        model.addAttribute("products", productService.getAllProducts());
        return "add-order";
    }

    @PostMapping("/save-order")
    public String saveOrder(@ModelAttribute("order") Order order) {
        orderService.saveOrder(order);
        return "redirect:/order-list";
    }

    @GetMapping("/edit-order/{id}")
    public String showEditOrderForm(@PathVariable Long id, Model model) {
        Order order = orderService.getOrderById(id);
        model.addAttribute("order", order);
        return "edit-order"; // View page: edit-order.html (optional)
    }

    @PostMapping("/update-order")
    public String updateOrder(@ModelAttribute("order") Order order) {
        Order existing = orderService.getOrderById(order.getId());
        existing.setCustomerId(order.getCustomerId());
        existing.setProductId(order.getProductId());
        existing.setOrderDate(order.getOrderDate());
        orderService.saveOrder(existing);
        return "redirect:/order-list";
    }

    @GetMapping("/delete-order/{id}")
    public String deleteOrder(@PathVariable Long id) {
        orderService.deleteOrder(id);
        return "redirect:/order-list";
    }
}
